
    <div class="row justify-content-end topbar-new">

        <div class="col-auto header-account">
            <span>CA balance:  <strong>$@balance</strong></span>
        </div>

        <div class="col-auto notification">
            <a href="/messagecenterpage">
                <div class="row">
                    <div class="col-auto not-border">
                        <span class="notification-number">@messagecount</span>
                        <i class="far fa-bell bell-icon" aria-hidden="true"></i>
                    </div>

                    <div class="col-auto not-border d-sm-inline-block d-none" style="width:450px"><p>@messagefordisplay_title</p><p>@messagefordisplay_message</p></div>
                
                </div>
            </a>
        </div>

        <div class="col-auto pl-0 pr-0">
            <div class="nav-profile dropdown pl-3">

                <div class="dropdown">
                    <a class="nav-link dropdown-toggle" data-toggle="dropdown" id="profileDropdown">
                    
                        <span class="nav-profile-name"> </span><i class="fas fa-chevron-down"></i>
                    </a>
                    <div class="dropdown-menu dropdown-menu-right" aria-labelledby="profileDropdown">
                        <a class="dropdown-item" href="/accountpage"><i class="fas fa-user-circle"></i> Profile</a>
                        <a class="dropdown-item" href="/cashaccount/overviewpage"><i class="fas fa-wallet"></i> Cash Account</a>
                        @*<a class="dropdown-item"><i class="fas fa-cog"></i> Settings</a>*@

                        <a class="dropdown-item" @onclick="@(async () => await SwitchUserTypes.InvokeAsync(2))"><i class="fas fa-unlock-alt"></i> To publisher</a>
                        <a class="dropdown-item border-bottom-0" @onclick="@(async () => await OnLogout.InvokeAsync(null))"><i class="fas fa-power-off"></i> Logout</a>

                    </div>
                </div>

            </div>

        </div>



    </div>

@inherits MainLayout


@code {

    double balance = 0;
    string message = "No messages";
    protected override async Task OnInitializedAsync()
    {
        
       
        IEnumerable<string> ien;
        while (!GeneralLogic.GeneralObjects.httpClient_api.DefaultRequestHeaders.TryGetValues("Auth",out ien))
        {
            await Task.Delay(1000);
        }
        balance = await GeneralLogic.Advertiser.CashAccount.Statistics.GetBalance();
    }


        protected override Task OnParametersSetAsync()
        {
        StateHasChanged();
            return base.OnParametersSetAsync();

        }


        [Parameter]
    public int messagecount { get; set; }

    [Parameter]
    public string messagefordisplay_title { get; set; }

    [Parameter]
    public string messagefordisplay_message { get; set; }
    

    [Parameter]
    public EventCallback<int> SwitchUserTypes { get; set; }

    [Parameter]
    public EventCallback<object> OnLogout { get; set; }

}